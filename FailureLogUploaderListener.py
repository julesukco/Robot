from dotenv import load_dotenv
import os
import requests
import base64
from robot.api import logger

# Load environment variables from .env file
load_dotenv()

api_token = os.getenv("PRACTITEST_API_TOKEN")


class FailureLogUploaderListener:
    ROBOT_LISTENER_API_VERSION = 2

    def __init__(self, output_dir="results"):
        self.output_dir = output_dir

    def end_test(self, name, attributes):
        print(f"\n\nReceived test name: {name}")
        print(f"Received attributes: {attributes}\n")

        if attributes['status'] == 'PASS':
            int_status = 0
        else:
            int_status = 1

        # Extract the unique ID from the test name
        test_id = self.extract_test_id(name)
        elapsed_time_ms = attributes['elapsedtime']
        hours, remainder = divmod(elapsed_time_ms // 1000, 3600)
        minutes, seconds = divmod(remainder, 60)
        execution_time = f"{hours}:{minutes}:{seconds}"
        script_name = attributes['source'].split('/')[-1]
        extra_info = "Script name: " + script_name + "\n" + "Test Case: " + attributes['originalname'] + "\n" + "Message: " + attributes['message']
        start_time = attributes['starttime']
        start_time = f"{start_time[:4]}-{start_time[4:6]}-{start_time[6:8]}T{start_time[9:11]}:{start_time[12:14]}:{start_time[15:17]}Z"
        end_time = attributes['endtime']
        end_time = f"{end_time[:4]}-{end_time[4:6]}-{end_time[6:8]}T{end_time[9:11]}:{end_time[12:14]}:{end_time[15:17]}Z"

        # Construct the path to the log file generated by Pabot
        log_file_path = os.path.join(self.output_dir, f"log.html")
        #log_file_path = os.path.join(self.output_dir, f"pabot_results/{test_id}_log.html")

        # Upload the unique log file
        self.log_result(log_file_path, name, test_id, int_status, execution_time, extra_info, start_time, end_time)

    def extract_test_id(self, test_name):
        """Extract the test ID from the test name (assuming it's the first part before ' ')."""
        if " " in test_name:
            return test_name.split()[0]
        return None

    def log_result(self, log_file_path, test_name, test_id, int_status, execution_time, extra_info, start_time, end_time):
        """Upload the log file (implement the actual upload logic here)."""
        url = f"https://api.practitest.com/api/v2/projects/29507/runs.json"
        headers = {
            "Content-Type": "application/json",
            "PTToken": api_token
        }

        # Construct the payload
        payload = {
            "data": {
                "type": "instances",
                "attributes": {
                    "instance-id": test_id,
                    "exit-code": int_status, 
                    "execution-time": execution_time,
                    "automated-execution-output": extra_info,
                    "start-time": start_time,
                    "end-time": end_time
                }
            }
        }

        if int_status == 1 and os.path.exists(log_file_path):
            print(f"Received file name: {log_file_path}")

            # Read file as binary
            with open(log_file_path, 'rb') as f:
                os.fsync(f.fileno())
                log_file_content = f.read()

            # Encode the binary content in base64
            log_file_content_encoded = base64.b64encode(log_file_content).decode('utf-8')

            # Add the log file content to the payload
            payload["data"]["files"] = {
                "data": [
                    {
                        "filename": "log.html",
                        "content_encoded": log_file_content_encoded  # Base64 encoded content
                                       }
                ]
            }

        response = requests.post(url, json=payload, headers=headers)

        if response.status_code == 200:
            logger.info(f"Log for test case '{test_name}' uploaded successfully.")
        else:
            logger.warn(f"Failed to upload log for test case '{test_name}' (status code {response.status_code}).")

